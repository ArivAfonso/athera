create table "public"."hidden_authors" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "author" uuid,
    "user_id" uuid not null
);


alter table "public"."hidden_authors" enable row level security;

alter table "public"."customization" add column "color" text not null default 'classic'::text;

alter table "public"."customization" add column "font_body" text not null default 'classic'::text;

alter table "public"."customization" add column "font_title" text not null default 'classic'::text;

alter table "public"."customization" add column "sidebar" boolean not null default false;

CREATE UNIQUE INDEX hidden_authors_pkey ON public.hidden_authors USING btree (id);

CREATE UNIQUE INDEX unique_follower ON public.followers USING btree (follower, following);

alter table "public"."hidden_authors" add constraint "hidden_authors_pkey" PRIMARY KEY using index "hidden_authors_pkey";

alter table "public"."hidden_authors" add constraint "hidden_authors_author_fkey" FOREIGN KEY (author) REFERENCES users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."hidden_authors" validate constraint "hidden_authors_author_fkey";

alter table "public"."hidden_authors" add constraint "hidden_authors_user_id_fkey" FOREIGN KEY (user_id) REFERENCES users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."hidden_authors" validate constraint "hidden_authors_user_id_fkey";

grant delete on table "public"."hidden_authors" to "anon";

grant insert on table "public"."hidden_authors" to "anon";

grant references on table "public"."hidden_authors" to "anon";

grant select on table "public"."hidden_authors" to "anon";

grant trigger on table "public"."hidden_authors" to "anon";

grant truncate on table "public"."hidden_authors" to "anon";

grant update on table "public"."hidden_authors" to "anon";

grant delete on table "public"."hidden_authors" to "authenticated";

grant insert on table "public"."hidden_authors" to "authenticated";

grant references on table "public"."hidden_authors" to "authenticated";

grant select on table "public"."hidden_authors" to "authenticated";

grant trigger on table "public"."hidden_authors" to "authenticated";

grant truncate on table "public"."hidden_authors" to "authenticated";

grant update on table "public"."hidden_authors" to "authenticated";

grant delete on table "public"."hidden_authors" to "service_role";

grant insert on table "public"."hidden_authors" to "service_role";

grant references on table "public"."hidden_authors" to "service_role";

grant select on table "public"."hidden_authors" to "service_role";

grant trigger on table "public"."hidden_authors" to "service_role";

grant truncate on table "public"."hidden_authors" to "service_role";

grant update on table "public"."hidden_authors" to "service_role";

create policy "Enable delete for users based on user_id"
on "public"."hidden_authors"
as permissive
for delete
to public
using ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable insert for authenticated users only"
on "public"."hidden_authors"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read for users based on user_id"
on "public"."hidden_authors"
as permissive
for select
to public
using ((( SELECT auth.uid() AS uid) = user_id));



